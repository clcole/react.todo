{"version":3,"sources":["components/TodoForm.js","components/TodoRow.js","constants/filters.js","components/TodoTable.js","components/FilterButton.js","components/App.js","serviceWorker.js","index.js"],"names":["TodoForm","props","handleChange","e","setState","content","target","value","handleSubmit","preventDefault","onAddSubmit","state","className","onSubmit","this","type","onChange","Component","TodoRow","todo","onToggleClick","onDeleteClick","active","onClick","id","FILTERS","TodoTable","todos","filter","todoList","forEach","push","key","FilterButton","onFilterClick","children","App","setLocalStorage","localStorage","setItem","JSON","stringify","getLocalStorage","getItem","handleFilterClick","visibility","handleAddSubmit","nextId","handleToggleClick","map","handleDeleteClick","componentDidMount","data","parse","todoActiveCount","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5159104e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport class TodoForm extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      content: \"\"\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      content: e.target.value\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.onAddSubmit(this.state.content);\n    this.setState({content: \"\"});\n  }\n\n  render() {\n    return (\n      <form className=\"todo-form\" onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          value={this.state.content}\n          onChange={this.handleChange}\n        />\n        <button type=\"submit\">Add</button>\n      </form>\n    );\n  }\n}","import React from \"react\";\n\nexport function TodoRow({ todo, onToggleClick, onDeleteClick }) {\n  const className = todo.active ? \"active-button\" : \"completed-button\";\n  return (\n    <div className=\"todo-row\">\n      <span className=\"todo-content\">{todo.content}</span>\n      <button\n        className={className}\n        type=\"button\"\n        onClick={() => onToggleClick(todo.id)}\n      >\n        <i className=\"fas fa-check\"></i>\n      </button>\n      <button\n        className=\"delete-button\"\n        type=\"button\"\n        onClick={() => onDeleteClick(todo.id)}\n      >\n        <i className=\"fas fa-trash\"></i>\n      </button>\n\n      \n    </div>\n  );\n}\n","export const FILTERS = {\n  SHOW_ALL: \"SHOW_ALL\",\n  SHOW_ACTIVE: \"SHOW_ACTIVE\",\n  SHOW_COMPLETED: \"SHOW_COMPLETED\"\n};","import React from \"react\";\nimport { TodoRow } from \"./TodoRow\";\nimport { FILTERS } from \"../constants/filters\";\n\nexport function TodoTable({ todos, filter, onToggleClick, onDeleteClick }) {\n  const todoList = [];\n\n  todos.forEach(todo => {\n    if (filter === FILTERS.SHOW_ACTIVE && todo.active) {\n      todoList.push(\n        <TodoRow \n          key={todo.id} \n          todo={todo} \n          onToggleClick={onToggleClick}\n          onDeleteClick={onDeleteClick}\n        />\n      );\n    }\n    if (filter === FILTERS.SHOW_COMPLETED && !todo.active) {\n      todoList.push(\n        <TodoRow \n          key={todo.id} \n          todo={todo} \n          onToggleClick={onToggleClick}\n          onDeleteClick={onDeleteClick}\n        />\n      );\n    }\n    if (filter === FILTERS.SHOW_ALL) {\n      todoList.push(\n        <TodoRow \n          key={todo.id} \n          todo={todo} \n          onToggleClick={onToggleClick}\n          onDeleteClick={onDeleteClick}\n        />\n      );\n    }\n  });\n\n  return (\n    <div className=\"todo-table\">\n      {todoList}\n    </div>\n  );\n}","import React from \"react\";\n\nexport function FilterButton({ filter, onFilterClick, children }) {\n  return (\n    <button\n      className=\"filter-button\"\n      type=\"text\"\n      onClick={() => onFilterClick(filter)}\n    >\n      {children}\n    </button>\n  );\n}\n","import React, { Component } from \"react\";\nimport { TodoForm } from \"./TodoForm\";\nimport { TodoTable } from \"./TodoTable\";\nimport { FilterButton } from \"./FilterButton\";\nimport { FILTERS } from \"../constants/filters\";\n\n// const TODOS = [\n//   { id: 100, content: \"todo1\", active: true },\n//   { id: 200, content: \"todo2\", active: true },\n//   { id: 300, content: \"todo3\", active: false },\n//   { id: 400, content: \"todo4\", active: true }\n// ];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      nextId: 0,\n      todos: [],\n      visibility: FILTERS.SHOW_ALL      \n    };\n  }\n\n  setLocalStorage = () => {\n    localStorage.setItem(\"clc-react-todo-app\", JSON.stringify(this.state))\n  }\n\n  getLocalStorage = () => {\n    return localStorage.getItem(\"clc-react-todo-app\");\n  }\n\n  handleFilterClick = (filter) => {\n    this.setState({\n      visibility: filter\n    }, this.setLocalStorage);\n  }\n\n  handleAddSubmit = (content) => {\n    const id = this.state.nextId;\n    this.setState(state => {\n      const todos = [...state.todos, { id, content, active: true }];\n      return { todos, nextId: id + 1 };\n    }, this.setLocalStorage);\n  }\n\n  handleToggleClick = (id) => {\n    this.setState(state => {\n      const todos = state.todos.map(todo => (\n        id === todo.id ? { ...todo, active: !todo.active } : todo\n      ));\n      return { todos };\n    }, this.setLocalStorage);\n  }\n\n  handleDeleteClick = (id) => {\n    this.setState(state => {\n      const todos = state.todos.filter(todo => id !== todo.id);\n      return { todos };\n    }, this.setLocalStorage);\n  }\n\n  componentDidMount = () => {\n    const data = this.getLocalStorage();\n    \n    if(data !== null) {\n      this.setState(JSON.parse(data));\n    }\n  };\n\n  // componentWillUnmount = () => { \n  //   localStorage.removeItem(\"clc-react-todo-app\"); \n  // };\n\n  render() {\n    let todoActiveCount = 0;\n    this.state.todos.forEach(todo => {\n      if(todo.active) todoActiveCount++;\n    });\n\n    return (\n      <div id=\"page-container\">\n        <header id=\"header\">\n          <h1>Todo List</h1>\n          <p>{todoActiveCount} active todo(s)</p>\n        </header>\n        <nav id=\"nav\">\n          <FilterButton\n            filter={FILTERS.SHOW_ALL}\n            onFilterClick={this.handleFilterClick}\n          >\n            All\n            </FilterButton>\n          <FilterButton\n            filter={FILTERS.SHOW_ACTIVE}\n            onFilterClick={this.handleFilterClick}\n          >\n            Active\n            </FilterButton>\n          <FilterButton\n            filter={FILTERS.SHOW_COMPLETED}\n            onFilterClick={this.handleFilterClick}\n          >\n            Completed\n            </FilterButton>\n        </nav>\n        <main id=\"main\">\n          <TodoForm\n            onAddSubmit={this.handleAddSubmit}\n          />\n          <TodoTable\n            todos={this.state.todos}\n            filter={this.state.visibility}\n            onToggleClick={this.handleToggleClick}\n            onDeleteClick={this.handleDeleteClick}\n          />\n        </main>\n        <footer id=\"footer\"></footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}