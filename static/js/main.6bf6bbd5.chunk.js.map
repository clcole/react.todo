{"version":3,"sources":["components/TodoForm.js","components/TodoRow.js","constants/filters.js","components/TodoTable.js","components/FilterButton.js","components/App.js","serviceWorker.js","index.js"],"names":["TodoForm","props","handleChange","e","setState","content","target","value","handleSubmit","preventDefault","onSubmit","todo","state","className","this","type","onChange","placeholder","required","children","Component","TodoRow","onToggleClick","onEditClick","onDeleteClick","classNameContent","classNameToggleButton","toggleButtonText","class","active","onClick","id","FILTERS","TodoTable","todos","filter","onEditSubmit","todoList","forEach","row","edit","key","push","FilterButton","onFilterClick","App","setLocalStorage","localStorage","setItem","JSON","stringify","getLocalStorage","getItem","handleFilterClick","visibility","handleAddSubmit","nextId","handleToggleClick","map","handleEditClick","handleEditSubmit","handleDeleteClick","componentDidMount","data","parse","getHeaderMessage","activeCount","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6bf6bbd5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport class TodoForm extends Component {\n  constructor(props){\n    super(props);\n    this.state = this.props.todo.content \n      ? { content: this.props.todo.content }\n      : { content: \"\" };\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      content: e.target.value\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.onSubmit({...this.props.todo, content: this.state.content});\n    this.setState({content: \"\"});\n  }\n\n  render() {\n    return (\n      <form className={this.props.className} onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          value={this.state.content}\n          onChange={this.handleChange}\n          placeholder=\"Enter a new to-do...\"\n          required\n        />\n        <button type=\"submit\">{this.props.children}</button>\n      </form>\n    );\n  }\n}","import React from \"react\";\n\nexport function TodoRow({ todo, onToggleClick, onEditClick, onDeleteClick }) {\n\n  let classNameContent = \"todo-content todo-content-active\";\n  let classNameToggleButton = \"active-button\";\n  let toggleButtonText = <i class=\"far fa-square\"></i>;\n\n  if(!todo.active) {\n    classNameContent = \"todo-content todo-content-completed\";\n    classNameToggleButton = \"completed-button\";\n    toggleButtonText = <i class=\"far fa-check-square\"></i>;\n  }\n\n  return (\n    <div className=\"todo-row\">\n      <span className={classNameContent}>{todo.content}</span>\n      \n      <button\n        className={classNameToggleButton}\n        type=\"button\"\n        onClick={() => onToggleClick(todo.id)}\n      >\n        {toggleButtonText}\n      </button>\n      \n      <button\n        className=\"edit-button\"\n        type=\"button\"\n        onClick={() => onEditClick(todo.id)}\n      >\n        <i className=\"fas fa-pen\"></i>\n      </button>\n      \n      <button\n        className=\"delete-button\"\n        type=\"button\"\n        onClick={() => onDeleteClick(todo.id)}\n      >\n        <i className=\"fas fa-trash\"></i>\n      </button>\n    </div>\n  );\n}\n","export const FILTERS = {\n  SHOW_ALL: \"SHOW_ALL\",\n  SHOW_ACTIVE: \"SHOW_ACTIVE\",\n  SHOW_COMPLETED: \"SHOW_COMPLETED\"\n};","import React from \"react\";\nimport { TodoRow } from \"./TodoRow\";\nimport { TodoForm } from \"./TodoForm\";\nimport { FILTERS } from \"../constants/filters\";\n\nexport function TodoTable(props) {\n  const {\n    todos,\n    filter,\n    onToggleClick,\n    onEditClick,\n    onEditSubmit,\n    onDeleteClick\n  } = props;\n\n  const todoList = [];\n\n  todos.forEach(todo => {\n    const row = todo.edit\n      ?\n      (<TodoForm\n        key={todo.id}\n        todo={todo}\n        className=\"todo-form-edit\"\n        onSubmit={onEditSubmit}\n        >\n          Save\n        </TodoForm>)\n      :\n      (<TodoRow\n        key={todo.id}\n        todo={todo}\n        onToggleClick={onToggleClick}\n        onEditClick={onEditClick}\n        onDeleteClick={onDeleteClick}\n      />);\n\n    if (filter === FILTERS.SHOW_ACTIVE && todo.active) {\n      todoList.push(row);\n    }\n\n    if (filter === FILTERS.SHOW_COMPLETED && !todo.active) {\n      todoList.push(row);\n    }\n\n    if (filter === FILTERS.SHOW_ALL) {\n      todoList.push(row);\n    }\n  });\n\n  return (\n    <div className=\"todo-table\">\n      {todoList}\n    </div>\n  );\n}","import React from \"react\";\n\nexport function FilterButton({ filter, onFilterClick, children }) {\n  return (\n    <button\n      className=\"filter-button\"\n      type=\"text\"\n      onClick={() => onFilterClick(filter)}\n    >\n      {children}\n    </button>\n  );\n}\n","import React, { Component } from \"react\";\nimport { TodoForm } from \"./TodoForm\";\nimport { TodoTable } from \"./TodoTable\";\nimport { FilterButton } from \"./FilterButton\";\nimport { FILTERS } from \"../constants/filters\";\n\n// const TODOS = [\n//   { id: 100, content: \"todo1\", active: true, edit: false },\n//   { id: 200, content: \"todo2\", active: true, edit: false },\n//   { id: 300, content: \"todo3\", active: false, edit: false },\n//   { id: 400, content: \"todo4\", active: true, edit: false }\n// ];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      nextId: 0,\n      todos: [],\n      visibility: FILTERS.SHOW_ALL      \n    };\n  }\n\n  setLocalStorage = () => {\n    localStorage.setItem(\"clc-react-todo-app\", JSON.stringify(this.state))\n  }\n\n  getLocalStorage = () => {\n    return localStorage.getItem(\"clc-react-todo-app\");\n  }\n\n  handleFilterClick = (filter) => {\n    this.setState({\n      visibility: filter\n    }, this.setLocalStorage);\n  }\n\n  handleAddSubmit = ({content}) => {\n    const id = this.state.nextId;\n    const todo = { id, content, active: true, edit: false};\n    this.setState(state => {\n      const todos = [...state.todos, todo];\n      return { todos, nextId: id + 1 };\n    }, this.setLocalStorage);\n  }\n\n  handleToggleClick = (id) => {\n    this.setState(state => {\n      const todos = state.todos.map(todo => (\n        id === todo.id ? { ...todo, active: !todo.active } : todo\n      ));\n      return { todos };\n    }, this.setLocalStorage);\n  }\n\n  handleEditClick = (id) => {\n    this.setState(state => {\n      const todos = state.todos.map(todo => (\n        id === todo.id ? { ...todo, edit: true } : todo\n      ));\n      return { todos };\n    });\n  }\n\n  handleEditSubmit = ({id, content}) => {\n    this.setState(state => {\n      const todos = state.todos.map(todo => (\n        id === todo.id ? { ...todo, content, edit: false } : todo\n      ));\n      return { todos };\n    }, this.setLocalStorage);\n  }\n\n  handleDeleteClick = (id) => {\n    this.setState(state => {\n      const todos = state.todos.filter(todo => id !== todo.id);\n      return { todos };\n    }, this.setLocalStorage);\n  }\n\n  componentDidMount = () => {\n    const data = this.getLocalStorage();\n    \n    if(data !== null) {\n      this.setState(JSON.parse(data));\n    }\n  };\n\n  // componentWillUnmount = () => { \n  //   localStorage.removeItem(\"clc-react-todo-app\"); \n  // };\n\n  getHeaderMessage = () => {\n    let activeCount = 0;\n    this.state.todos.forEach(todo => {\n      if(todo.active) activeCount++;\n    });\n\n    if(activeCount === 0) return \"You're all caught-up!\";\n    if(activeCount === 1) return \"You have 1 active to-do\";\n\n    return `You have ${activeCount} active to-do's`;\n  }\n\n  render() {\n    return (\n      <div id=\"page-container\">\n        <header id=\"header\">\n          <h1>To-do List</h1>\n          <p>{this.getHeaderMessage()}</p>\n        </header>\n        <nav id=\"nav\">\n          <FilterButton\n            filter={FILTERS.SHOW_ALL}\n            onFilterClick={this.handleFilterClick}\n          >\n            View All\n          </FilterButton>\n          <FilterButton\n            filter={FILTERS.SHOW_ACTIVE}\n            onFilterClick={this.handleFilterClick}\n          >\n            View Active\n          </FilterButton>\n          <FilterButton\n            filter={FILTERS.SHOW_COMPLETED}\n            onFilterClick={this.handleFilterClick}\n          >\n            View Completed\n          </FilterButton>\n        </nav>\n        <main id=\"main\">\n          <TodoForm\n            todo={{}}\n            className=\"todo-form-add\"\n            onSubmit={this.handleAddSubmit}\n          >\n            Add\n          </TodoForm>\n          <TodoTable\n            todos={this.state.todos}\n            filter={this.state.visibility}\n            onToggleClick={this.handleToggleClick}\n            onEditClick={this.handleEditClick}\n            onEditSubmit={this.handleEditSubmit}\n            onDeleteClick={this.handleDeleteClick}\n          />\n        </main>\n        <footer id=\"footer\"><p>CLCole</p></footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}